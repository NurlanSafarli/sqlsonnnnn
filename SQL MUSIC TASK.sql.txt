CREATE DATABASE Music

USE Music

CREATE TABLE Users (
  UserID INT PRIMARY KEY IDENTITY,
  Name NVARCHAR(50) NOT NULL,
  Surname NVARCHAR(50) NOT NULL,
  Username NVARCHAR(50) UNIQUE,
  Password NVARCHAR(100),
  Gender NVARCHAR(10)
);
CREATE TABLE Artists (
  ArtistID INT PRIMARY KEY IDENTITY,
  Name NVARCHAR(50) NOT NULL,
  Surname NVARCHAR(50) NOT NULL,
  Birthday DATE,
  Gender NVARCHAR(10)
);
CREATE TABLE Categories (
  CategoryID INT PRIMARY KEY IDENTITY,
  Name NVARCHAR(50)
);
CREATE TABLE Musics (
  MusicID INT PRIMARY KEY IDENTITY,
  Name NVARCHAR(100) NOT NULL,
  DurationInSeconds INT,
  CategoryID INT FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID),
  ArtistID INT FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID)
    
   
);

CREATE TABLE Playlist (
  PlaylistID INT PRIMARY KEY IDENTITY,
  UserID INT FOREIGN KEY (UserID) REFERENCES Users(UserID),
  MusicID INT FOREIGN KEY (MusicID) REFERENCES Musics(MusicID)
   

);

CREATE VIEW MusicInfo AS
SELECT M.Name AS MusicName, M.DurationInSeconds AS MusicDuration, C.Name AS CategoryName, A.Name + ' ' + A.Surname AS ArtistName
FROM Musics M
 JOIN Categories C ON M.CategoryID = C.CategoryID
JOIN Artists A ON M.ArtistID = A.ArtistID;


CREATE PROCEDURE usp_CreateUser
    @Name NVARCHAR(50),
    @Surname NVARCHAR(50),
    @Username NVARCHAR(50),
    @Password NVARCHAR(100),
    @Gender NVARCHAR(10)
AS
BEGIN
    INSERT INTO Users (Name, Surname, Username, Password, Gender)
    VALUES (@Name, @Surname, @Username, @Password, @Gender);
END;



CREATE PROCEDURE usp_CreateCategory
    @Name NVARCHAR(50)
AS
BEGIN
    INSERT INTO Categories (Name)
    VALUES (@Name);
END;


CREATE PROCEDURE usp_CreateMusic
    @Name NVARCHAR(100),
    @DurationInSeconds INT,
    @CategoryID INT,
    @ArtistID INT
AS
BEGIN
    INSERT INTO Musics (Name, DurationInSeconds, CategoryID, ArtistID)
    VALUES (@Name, @DurationInSeconds, @CategoryID, @ArtistID);
END;

ALTER TABLE Musics
ADD IsDeleted BIT NOT NULL DEFAULT 0;


CREATE PROCEDURE usp_DeleteMusic
    @MusicID INT
AS
BEGIN
    DECLARE @IsDeleted BIT;

    SELECT @IsDeleted = IsDeleted
    FROM Musics
    WHERE MusicID = @MusicID;

    IF @IsDeleted = 0
    BEGIN
        UPDATE Musics
        SET IsDeleted = 1
        WHERE MusicID = @MusicID;
    END
    ELSE
    BEGIN

        DELETE FROM Musics
        WHERE MusicID = @MusicID;
    END;
END;

CREATE FUNCTION GetUserArtistCount(@UserID INT)
RETURNS INT
AS
BEGIN
    DECLARE @ArtistCount INT;

    SELECT @ArtistCount = COUNT(DISTINCT A.ArtistID)
    FROM Playlist P
    INNER JOIN Musics M ON P.MusicID = M.MusicID
    INNER JOIN Artists A ON M.ArtistID = A.ArtistID
    WHERE P.UserID = @UserID;

    RETURN @ArtistCount;
END;

DECLARE @UserID INT;
SET @UserID = 1;

SELECT dbo.GetUserArtistCount(@UserID) AS ArtistCount;